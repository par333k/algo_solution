/**
 * 정렬된 배열의 요소들을 중복없이 단 1번씩만 가질 수 있도록 주어진 배열을 그대로 수정하고, 수정된 배열의 새로운 길이를 반환하라
 * 1. 제한사항
 * 새 배열을 생성하지 않고 기존의 배열을 통해 답을 반환해야 한다
 * 정수형 데이터가 모인 배열이다
 * 요소들을 중복 없이 선택하여 갯수를 세어야 한다
 * 입력으로 주어지는 배열의 길이는 0일 수도 있다
 * 반환값은 정수이며, 배열의 길이보다 작거나 같다(중복을 피해야 하므로)
 *
 * 2. 아이디어
 * 정렬이 되어있기에 앞에서 중복이 아니면 뒤에서 중복을 걱정할 필요가 없다.
 * 배열의 맨 첫 요소는 무조건 세어야 하기에 첫 요소를 저장한다(curr)
 * 배열의 요소를 맨 첫 요소를 제외하고 순회한다.
 * - 1에서 n-1까지 순회
 * - curr과 값이 같다면 다른 요소로 넘어간다
 * - curr과 값이 같지 않다면 curr을 현재 값으로 업데이트하고 count 값을 하나 증가시킨다
 * - count 값을 증가시키기 전에 count가 인덱스가 되어 해당 공간에 달라진 curr 값으로 업데이트한다
 * 시간복잡도 : O(n) - 배열의 모든 요소 n개를 순회해야한다
 * 공간복잡도 : O(1)
 * 2-1. Set을 사용하면 새 객체를 사용하게 되므로 제한조건에 맞지 않는다.(자바스크립트)
 *
 * 3. 테스트 케이스
 * - nums = []
 * - nums = [1,2,3,4]
 * - nums = [0, 0, 1, 1, 1, 2]
 */
const nums = [0,0,1,1,1,2];
// result 3
function solution(nums) {
    if (nums.length === 0) return 0;
    let current = nums[0];
    let count = 1;

    for (let i = 0; i < nums.length; i++) {
        if (current != nums[i]) {
            current = nums[i];
            count = count + 1;
        }
    }
    return count;
}

console.log(solution(nums));

